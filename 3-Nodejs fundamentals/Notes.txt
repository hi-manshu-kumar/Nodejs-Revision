Building node application (note)
Do read and write from file system
3rd party npm modules - collection of 3rd party modules
3rd party module to fetch input from user
debugining
-------------------------
Modules in node
how we can use it?
We do by require fucniton it helps us do 
1> load modules that comes in bundled with nodejs like http modules that lets us make web server, fs module that lets us acess the file system  
2> to load 3rd library that helps us require express and sqlize which help us write less code
use to solve complex problems and implement it 
3> we use require to use our own file so that we can break our code multiole smaller files/ really hard to test maintain and update

->to use fs module  
const fs = require('fs');
fs.appendFile('asdl.txt','Hello world',fucniton (data,err) {
    if (data) {
        console.log('suceessful');
    }
    if(err) {
        console.log('unable to wriite to file');
    }
});

->to use os module
const os = require ('os');

var user = os.userInfo();

fs.appendFile('greetings.txt', `hello ${user.username} !`) ;
-----------------------------------------------
Requiring our own files
 create a file (notes.js)
 write  console.log('startting notes.js');

 go to app.js
 now require it in here

 ! using these we do not import any functionality as notesjs do not have any fucnitons to return
 -----------------------------------
 using 3rd party modules

 npm i <pkgname> --save

 in app.js const _ = require('lodash') //first it will search in buitin modules then it will search in node_modules folder

 //lodash is used for maintaining cross browser integrity in performing object , array traversal or any function.
 -------------------------------------
 install nodemon
 lodash was locally added
 but nodemon will be globally added
 it is a command line utility that gets executed from terminal 
 used for devlopment purpose
 ---------------------------------------
 getting input from user
 node app.js list [list here is the argument passed to the app.js]

 now we can use this in app.js as process.argv
 argv is the list of array of arguments provided in the console
now if we get key value in command line we get difficulty to acess it we use YARGS
------------------------------------------
simplified input with YARGS 

install yargs using npm i yargs@4.7.1 --save
in app.js const yargs = require ('yargs');
const argv = yargs.argv;
 
now just go and give some arguments to node app --title=secrets
node app --title secrets
node app --title "secrets"

in app.js we use yargs functions
1> yargs.argv.title/yargs.argv.body for specified calls
2> and yargs.argv._[0] for funciton calling inside app.js

#cmd
 node app add --title=secret --body="This is my secret"
------------------------------------
working with JSON

//converting object to json string
var obj = {
    name: 'himank'
};

var stringObj = JSON.stringify(obj);
console.log(typeof stringObj);
console.log(stringObj);

//converting  json string to object
var personString = '{"name":"Himank", "age": 21}';

var person = JSON.parse(personString);
console.log(person,typeof person);

json is nothing more than a string that just looks like js object with differnce that it takes double quotes by converting single quotes and quiting property name .

JSON.stringify(jsObject)
JSON.parse(jsonFile)
------------------------------------------
Adding and saving notes

    var notes = [];
    var note = {
        title,
        body
    };
        //for checking if the file is present or not / or any problem occurs
    try{
        var noteString = fs.readFileSync('notes-data.json');  //first we update the notes object with values that are present in the notes-data.json and then add push notes to it
        notes = JSON.parse(noteString);
    }catch (e) {

    }
        //for checking if the file contains duplicate title
    var duplicateNotes = notes.filter((note) => note.title === title );

    if (duplicateNotes.length === 0){
        notes.push(note);
        fs.writeFileSync('notes-data.json',JSON.stringify(notes));
    };
-------------------------------------
Refactoring for Reusablity
    var fetchNotes = () => {
       try{
            var noteString = fs.readFileSync    ('notes-data.json');
            return notes = JSON.parse(noteString);
        }catch (e) {
            return [];
        }
    };

    var saveNotes = (notes) => {
        fs.writeFileSync('notes-data.json', JSON.stringify(notes));
    };

    //used in notes.js
    1//var notes = fetchNotes();
    2//if (duplicateNotes.length === 0){
        notes.push(note);
        saveNotes(notes);
        return note;
    };

    //in app.js
    var note = notes.addNote(argv.title,argv.body);
    if(note) {
        console.log("Note created");
        console.log("--");
        console.log(`Title: ${note.title} Body: ${note.body} `);
    }else{
        console.log("Note title taken");
    }
------------------------------------------------
Removing a note
 //in notes.js
    //fetch notes
    var notes = fetchNotes();
    // filter notes , removing the one with title of argument
    var filteredNotes = notes.filter ((note) => note.title !== title);
    //save new notes array
    saveNotes(filteredNotes);
 //in cmd
    node app remove --title=secret
 //in app.js
    //var noteRemoved = notes.removeNote(argv.title);
    //var message = noteRemoved ? 'Note was removed' : 'Note not found';
    //console.log(message);
----------------------------------------------------
reading a note and reusability
 //in notes.js 
    // var notes = fetchNotes();
    //var filteredNotes = notes.filter((note) => note.title === title);
    //return filteredNotes[0];
 //in app.js
    var note = notes.getNote(argv.title);
    if (note){
        console.log('Note found');
        notes.logNote(note);
    }else {
        console.log('Note not found');
    }
 //cmd
    node app read --title="secret3"
---------------------------------------------------------
debugining
    ->node inspect debugging.js //to get debugging in node
    ->list(10) //prints 10 lines below and up
    ->n //to traverse js file line by line
    ->c // complete //to traverse js file

--------------------------------------------------------------