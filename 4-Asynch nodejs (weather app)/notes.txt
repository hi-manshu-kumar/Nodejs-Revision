Creating weather app using asynch nodejs
----------------------------------------------
#request module from npm
to do asynch call we require 'request' module
npm install request@2.73.0 --save

it is used to make request to https 

request({} , ()=>{})
1st argument is option object to configure
2nd argument is callback function

request({
    url:        ,
    json:true   //data coming back is json data that lets us convert data to object and then we can convert to string
},(error, response, body) => {
    console.log(body);
})
-----------------------------------------
#pretty print JSON object

JSON.stringify(body, undefined, 2)

    undefined gives the filter of the array to be undefined
    2 or 4 for specifing the amount of indentaion to be given
-------------------------------------------------
#Encoding User Input
  //const argv = yargs
    .options({
        a: {
            demand: true,
            alias: 'address',
            describe: 'Address to fetch weather for',
            string: true
        }
    })
    .help()
    .alias('help', 'h')
    .argv;
-----------------------------------------------
Encoding/Decoding into uriComponent
// const encodeAddress = encodeURIComponent(argv.address);
                         decodeURIComponent(encodeAddress);
-----------------------------------------------
error handling using callbacks

request({
    url: ` https://maps.googleapis.com/maps/api/geocode/json?address=${encodeAddress}`,
    json: true
},(error, response, body) => {
    if (error) {
        console.log('Unable To connect to Google servers.');
    } else if ( body.status === 'ZERO_RESULTS') {
        console.log('Unable to find that address.');
    } else if ( body.status === 'OK') {
        console.log(`Address : ${body.results[0].formatted_address}`);
        console.log(`Latitude : ${body.results[0].geometry.location.lat}  `);
        console.log(`Latitude : ${body.results[0].geometry.location.lng}`);
    }
});
-----------------------------------------------
abstracting callbacks

1.
we are cleaning up the code by removing the app.js fetching of location codes to shifting in other files

in geocode file we require request module and codes and then exporting it by modules.exports.geocodeAddress = geocodeAddress;

2.
now we are doing the logging of output to the app.js from geocode for this we do
        geocode.geocodeAddress(argv.address, (errorMessage, results) => {
            if(errorMessage) {
                console.log(errorMessage);
            }else {
                console.log(JSON.stringify(results, undefined, 2));
            }
        });

the callback function gets executed after the output comes from http calling if its an error it prints 
                callback('Unable To connect to Google servers.')
                callback('Unable to find that address.');

if true then we have to send the data to the 
    in app.js ====== console.log(JSON.stringify(results, undefined, 2));
    in geocode.js ==== callback( undefined, {
                            address: body.results[0].formatted_address,
                            latitude: body.results[0].geometry.location.lat,
                            longitude: body.results[0].geometry.location.lng
                        });
            
            undefined bcoz of the fact that the errorMessage is null,
            and second object gets printed to console

this follows dry principle
---------------------------------------------------
weather search api

sample code
        const request = require('request');

        request({
            url: 'https://api.darksky.net/forecast/5e37c732eaa4e87e3585a01b0b59b222/37.8267,-122.4233',
            json: true
        },(error, response, body) => {
            if ( !error && response.statusCode === 200) {
                console.log(body.currently.temperature);
            } else {
                console.log('Unable to fetch weather');
            }
        });
-----------------------------------------------------
chaining callbacks

1. we move the logic of weather searching using api and put it into weather.js
2. then we made the callback function for weather app in app.js to listen error and results of weather api searching
3. after this we chained the calling of api togther by putting the weather seraching in the location searching api only when the case is success .