first donwload and require it in --server.js--

then connnect to mongoose
since callback feature of mongoose is bad we use promise for callback

now we have to define the schema(model) of "todo" that is going to be stored in the database
--------------
now we have to use that model object and create its instance by
const obj = new TODO({
    text: "",
    complete: 123
});

obj.save().then( (res)=>{}, (err)=>{});
--------------------------------------------------------------------
validators and defaults

var Todo = mongoose.model('Todo',{ // model is the method that we use to create new model , it takwes 2 argument,
    //1st one contaitns the string and 2nd one is the object which will define the various properties of the model
    text: {
        type:String,
        required: true,
        minlength: 1, // someone will provide test:"", which will be working for required:true buyt by tellling the length of the text 1 we will be more authenticated
        trim: true, //removes trailing white spaces present in fornt and back of the string eg text:"              " ------------ it will still fail
    },
    completed: {
        type: Boolean,
        default: false 
    },
    completedat: {
        type: Number,
        default: null
    }
});
1 minlength
2 trim
3 default
4 require
----------------------------------------------------------
resource creation and endpoint in POSTMAN

but first lets break our file
remove the mongooose connection command and put it into db/mongoose.js

//var mongoose = require('mongoose');

mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost:27017/TodoApp');//

models>todo.js ============== require mongoose and exports "module.exports = {User}"
      >user.js 

in server.js
=====================
const express = require('express');
const bodyparser = require('body-parser');

const {mongoose} = require('../db/mongoose');
const {todo} = require('../models/todo');
const {user} = require('../models/user'); 

var app = express();

app.post('/todos', (req,res) => {

});

app.listen( 3000, ()=> {
    console.log('server running o 3000....');
});

bodyparser take json and converting them to object and attaches req object
middleware==
if we are using custom middleware then we specify the 'function'
if we are using 3rd party middleware then we just call its 'name'

app.use(bodyparser)
--------------------------------------------------------------
testing post todos

create a test folder and create server.test.js

const expect = require('expect');
const request = require('request');

//////////////////done is also used to return back to previous function but we can also do some asynch call in the testing and till that done function is not called in the function that has the taken done as parameter

npm i expect@1.20.2 mocha@3.0.2 supertest@2.0.0 --save-dev

descibe to group all the route's test cases

<---------------------------------------->
beforeEach((done) => {
     Todo.remove({}).then(() =>done()); 
})  //testing lifecycle to make sure the db is empty

describe('POST /todos', () => {
    it('should create a new todo', (done)=> {
        var text = 'Test todo next';

        request(app)
            .post('/todos')               // this tells the route
            .send({text})                 // this object is going to be converted in json by supertest
            .expect(200)                  // this tells the http status to be expected
            .expect((res) => {            // this will 
                expect(res.body.text).toBe(text);
            })
            .end((err, res) => {
                if(err){
                    return done(err);
                }

                Todo.find().then((todos) => {
                    expect(todos.length).toBe(1);
                    expect(todos[0].text).toBe(text);
                    done();
                }).catch((e) => done(e));
            });
    });
});
<-------------------------------------------> 
after this we have to specify the script in package.json and write

"scripts": {
   "test": "mocha server/**/*.test.js",
   "test-watch": "nodemon --exec \"npm test\""
}

in cmd type //npm run test-watch
----------------------------------------------------------------------------
list resources - Get todos

for a better scalability of the res.send(data);
we specify a object in the arguments.... for eg: -

res.status(200).send(               // by specifying the object instead of variable we have the ability to scale our response
    {
        todos: data,
        code : "jds"
    }
)

<------------------------------------------>
app.get('/todos', (req, res) => {
    Todo.find().then((todos) => {
        res.status(200).send({todos});
    }, (err) => {
        res.status(400).send(err);
    })
});
<------------------------------------------>
to use postman we have different req handlers
get, post
and we can make a collection of them by clicking on "save as" button in the right side
---------------------------------------------------------------------------------------
when we want to search only one object then we should use findOne as it dont return as array (also it returns the doc cursor)
whereas it give us the specific record in object

<------------------------------------------>
const {mongoose} = require('mongoose');
const {Todo} = require('./../server/models/todo');

var id = '5bc642d8d9eaa91c3eacdaeb';


Todo.find({
    _id: id
}).then((data) => {
    console.log('todos', data);
});

Todo.findOne({
    _id: id
}).then((data) => {
    console.log('todos', data)
});

Todo.findById(id).then((data) => {4
    if(!data){
        console.log('id not found');
    }
    console.log('todo by id', todo);
}).catch((err) => {
    console.log('error in id', err)
});
<------------------------------------------>
now to check/validate the objectID in the findById
//////////////////////////////////////////////////////////////////////////
const {ObjectID} = require('mongodb');
const {mongoose} = require('./../server/db/mongoose');
const {Todo} = require('./../server/models/todo');
const {User} = require ('./../server/models/user');

var id = '5bc6478966d70b182e9cf28e';

if(!ObjectID.isValid(id)) {                       --------------------------this is for checking the id is valid or not 
    console.log('ID not valid');
}

Todo.find({
    _id: id
    // text : "Second test todo"
}).then((data) => {
    console.log('todos', data);
});

Todo.findOne({
    _id: id
}).then((data) => {
    console.log('todo', data)
});

Todo.findById(id).then((data) => {
    if(!data){
        console.log('id not found');
    }
    console.log('todo by id', data);
}).catch((err) => {
    console.log('error in id', err)
});

User.findById(id).then( (data) => {
    if(!data){
        console.log("no id found");
    }
    console.log("data is.",data);
}).catch((err) => {
    console.log(err);
})
///////////////////////////////////////////////////
deploying to heroku

  "scripts": {
    "start": "node server/server.js", ------------------------------------> for telling heroku to start with this cmd 
    "test": "mocha server/**/*.test.js",
    "test-watch": "nodemon --exec \"npm test\""
  },
  "engines": {  ----------------------------------------------------------> this tells which node server to use
    "node": "6.2.2"
  },

heroku create
heroku addons:create mongolab:sandbox
- now take the mongodbUri from the heroku it can be used in mongoose.js 
   mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');
git commit -am 'Setup for heroku'
git push
git push heroku master
-----------------------------------------------------------------------------------------------
postman environmment setting

it helps in setting the localhost and url link to be interchanged in between
add th env from right top side and then specify url - localhost:3000, url - localhost: https://heroku...........
now when calling the url with diff req handlers
--> {{url}}/todos/hadsjfh



VISIT SERVER/server.js 
-------------------------------------------------------------------------
delete data

app.post('/todos/:id', (req,res) => {
    var id = req.params.id;

    if(!ObjectID.isValid(id)){
        return res.status(404).send("send valid id");
    }
    Todo.findOneAndRemove({_id: id}).then((result) => {
        if(!result){
            return res.status(404).send("no todo found");
        }
        res.send({result});
    }).catch((e) => {
        res.status(400).send("err in connecting", e);
    })
});

---------------------------------------------------------------------
updating a resource - patch data


to update data of the api we have to update using patch method
npm i --save lodash@4.15.0

require lodash in server.js

app.patch('/todos/:id', (req, res) => {
    var id = req.params.id;
    var body = _.pick(req.body, ['text', 'completed']);
    
    if(!ObjectID.isValid(id)){
        return res.status(404).send("send valid id");
    }

    if(_.isBoolean(body.completed) && body.completed){
        body.completedAt = new Date().getTime();
    } else {
        body.completed = false;
        body.completedAt = null;
    } 

    Todo.findByIdAndUpdate( {_id : id}, {$set: body}, {new: true}).then((data) =>{
        if(!data){
            return res.status(404).send();
        }

        res.send({data});
    }).catch((e) => {
        res.status(400).send();
    })
});

testing ->:::::::::::::::::::::::::::::::::::::::::::
describe('PATCH /todos/:id', () =>{
  it("Should update the todo ", (done) => {
    //grab id of first test
    //update text, set completed is true
    //200
    //text is changed, completed is true, completedAt is a number .toBeA
    var hexId = todos[0]._id.toHexString();
    var text = 'This should be the new text';

    request(app)
      .patch(`/todos/${hexId}`)
      .send({
        completed: true,
        text
      })
      .expect(200)
      .expect((res) => {
        expect(res.body.todo.text).toBe(text);
        expect(res.body.todo.completed).toBe(true);
        expect(res.body.todo.completedAt).toBeA('number');
      })
      .end(done);
  });
  
  if("should clear completedAt whrn todo is not completed" , (done) => {
    //grab id of second test
    // update text, completed to false
    //200
    //text is changed, completed false, completedAt is null .toNotExist 
    var hexId = todos[1]._id.toHexString();
    var text = 'This should be the new text!!';

    request(app)
      .patch(`/todos/${hexId}`)
      .send({
        completed: false,
        text
      })
      .expect(200)
      .expect((res) => {
        expect(res.body.todo.text).toBe(text);
        expect(res.body.todo.completed).toBe(false);
        expect(res.body.todo.completedAt).toNotExist();
      })
      .end(done);
  });
});
------------------------------------------------------------------------------------------------------------------------
setting environmment

`in server.js`
var env = process.env.NODE_ENV ';

`in package.json`
    "test": "export NODE_ENV = test || SET \"NODE_ENV=test\" && mocha server/**/*.test.js",
expot id for linux and mocha
set is for windows

`in server.js`
var env = process.env.NODE_ENV || 'development';

if(env === 'development'){
    //locally for development
    process.env.PORT = 3000; //since the port will be added by heroku if its on production mode
    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoApp';
}else if(env === 'test'){
    // custom database url
    process.env.PORT = 3000;
    process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoAppTest';

}

seperate it into config file and type 
require('./config/config');
in `server.js`
----------------------------------------------------------------------------------------------------------------
security and authenticated
 

