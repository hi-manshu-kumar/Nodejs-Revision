Express-------------

npm install express --save

const express = requirer('express');

var app = express();

http route handlers for eg if someone wants to visit the root of the website what we want to send something back maybe 'json' data maybe 'html' page

we can register a handler using

app.get('/', (req, res) => {
    res.send('Hello express');
});

1st argument- URL
2nd         - function that tells what to send back 


req = stores like headers that were used    
        any body info 
        method that was made with a req to the path 

res = data to send
    sending http codes

------
it didnt listen to any req to any URL

so to congfigure what it should listen we have

app.listen is going to bind the application to a port on our machine 

//        const express = require('express');

//      var app = express();

//        app.get('/', (req, res) => {
//            res.send('Hello express');
//        });
//        app.get('/bad', (req, res) => {    ------------------sending json data
//            res.send({
//                errorMessage: 'errr'
//        });
//        app.listen(3000);
-----------------------------------------------------------------
creating a web server and displaying static html files

we create a public files to let the user see these html files

we use a middleware
    middleware lets you configure how your express will work 

app.use(express.static(__dirname + '/public'));


express.static takes tha absolute that we want to serve up
---------------------------------------------------------------
rendering templates with data

we are gonna use another middleware ie handlebar 
handlebar is a templating view engine got express

#npm instal hbs --save

const hbs = require('hbs');
app.set('view-engine', 'hbs');

express by default checks 'views' folder to search the templating engine
create a view template file 

now in express
    app.get('/about', (req, res) => {
        res.render('about.hbs', {
            pageTitle:'About page',
            currentYear: new Date().getFullYear()
        });
    }); 

in about.hbs file
    <h1>This is a {{pageTitle}} page</h1>
---------------------------------------------------------------
#Advanced templating

1.partial its something that we can reuse throughout our template
to let handlebar to support partial we do

hbs.registerPartials(__dirname + '/views/partials');
 
 create a partial file in views/partials/footer.hbs

use it in hbs file by {{> footer}}

2.hbs registerHelper is a function that can be used in the hbs files

hbs.registerHelper('getCurrentYear', () => {
    return new Date().getFullYear()
});
in hbs file
{{getCurrentYear}}

3. hbs registerHelper with parameter passed

hbs.registerHelper('screamIt', (text) => {
    return text.toUpperCase();
})

{{screamIt Message}}
-------------------------------------------------------------
#Express middleware

app.use((req, res, next)=> {
    var log = `${req.url} ${req.method}`
    fs.appendFile('server.log', log + '/n', (err)=>{
        if(err)
        console.log('error is ', err);
    });

    res.render('maintainence.html');
    next();
})